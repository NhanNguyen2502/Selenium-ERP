package erp.testcases;import erp.base.BaseSetup;import erp.common.helpers.ExcelHelper;import erp.common.helpers.PropertiesHelper;import erp.common.helpers.TranslationHelpers;import erp.common.helpers.ValidateHelper;import erp.pages.SignInPage;import org.openqa.selenium.WebDriver;import org.testng.Assert;import org.testng.annotations.BeforeClass;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;public class SignInTest extends BaseSetup {    private WebDriver driver;    public SignInPage signInPage;    public ExcelHelper excelHelper;    public ValidateHelper validateHelper;    @BeforeClass    public void setUp() {        this.driver = getDriver();        excelHelper = new ExcelHelper();        validateHelper = new ValidateHelper(driver);        PropertiesHelper.loadAllFile();        driver.manage().deleteAllCookies();        signInPage = new SignInPage(driver);    }    @BeforeMethod    public void beforemethod() {        driver.navigate().refresh();        signInPage.verifylanguage(PropertiesHelper.getValue("language"));    }    @Test(priority = 1)    public void signInWithEmailNull() throws Exception {        signInPage.waitForPageLoaded();        String error = signInPage.verifyEmailnull();        System.out.println(error);        Assert.assertEquals(error, TranslationHelpers.setFile(validateHelper.getLanguageToTest(),                "$.auth.common.errorMessage.emailRequired"));    }    @Test(priority = 1)    public void sigInWithPasswordNull() throws Exception {        signInPage.waitForPageLoaded();        String error = signInPage.verifyPasswordNUll();        System.out.println(error);        Assert.assertEquals(error, TranslationHelpers.setFile(validateHelper.getLanguageToTest(),                "$.auth.common.errorMessage.passwordRequired"));    }    @Test(priority = 2)    public void siginWrongPassOrEmail() throws Exception {        signInPage.waitForPageLoaded();        String error;        error = signInPage.verifyWrongEmailOrPassword("asdasd@yopmail.com", "Password1234");        Assert.assertEquals(error, TranslationHelpers.setFile(validateHelper.getLanguageToTest(),                "$.errorFromServer.usernameOrPasswordIncorrect"));        driver.navigate().refresh();        error = signInPage.verifyWrongEmailOrPassword("testdeferp@yopmail.com", "Password12345");        Assert.assertEquals(error, TranslationHelpers.setFile(validateHelper.getLanguageToTest(),                "$.errorFromServer.usernameOrPasswordIncorrect"));    }    @Test(priority = 2)    public void signInWithInactiveAccount() {        signInPage.verifyAccountInactive(PropertiesHelper.getValue("inactiveEmail")                , PropertiesHelper.getValue("inactivePassword")                , TranslationHelpers.setFile(PropertiesHelper.getValue("language"),"$.auth.resendVerificationEmail.text.content"),PropertiesHelper.getValue("language"));    }    @Test(priority = 4)    public void signInTest() throws Exception {        signInPage.waitForPageLoaded();        excelHelper.setExcelFile("src/test/java/resources/Book1.xlsx", "Sheet1");        Assert.assertTrue(signInPage.verifyLogo(), "Not displayed");        Assert.assertTrue(signInPage.verifyTitle(TranslationHelpers.setFile(PropertiesHelper.getValue("language"),"$.auth.signInPage.text.welcomeHeader")), "Not same");        Assert.assertTrue(signInPage.verifyUsernameTextBox(), "Not displayed");        Assert.assertTrue(signInPage.verifyPasswordTextBox(), "Not displayed");        System.out.println(PropertiesHelper.getValue("email"));        signInPage.login(PropertiesHelper.getValue("email"), PropertiesHelper.getValue("password"));    }}