package erp.testcases.SignIn;import com.google.errorprone.annotations.Var;import erp.base.BaseSetup;import erp.base.ReportListener;import erp.base.TestListener;import erp.common.helpers.ExcelHelper;import erp.common.helpers.PropertiesHelper;import erp.common.helpers.TranslationHelpers;import erp.common.helpers.ValidateHelpers;import erp.pages.SignInPage;import io.qameta.allure.*;import org.openqa.selenium.WebDriver;import org.testng.Assert;import org.testng.ITestListener;import org.testng.ITestResult;import org.testng.annotations.*;@Listeners(ReportListener.class)public class SignInTest extends BaseSetup {    private WebDriver driver;    public SignInPage signInPage;    public ExcelHelper excelHelper;    public ValidateHelpers validateHelpers;    @BeforeClass    public void setUp() {        this.driver = getDriver();        excelHelper = new ExcelHelper();        validateHelpers = new ValidateHelpers(driver);        PropertiesHelper.loadAllFile();        //driver.manage().deleteAllCookies();        signInPage = new SignInPage(driver);    }//    @BeforeMethod//    public void beforemethod() {//        driver.navigate().refresh();//        signInPage.verifylanguage(PropertiesHelper.getValue("language"));//    }    @Test(priority = 1)    @Parameters({"language"})    public void signInWithEmailNull( @Optional("English") String language) throws Exception {        driver.navigate().refresh();        validateHelpers.waitForLoadJs();        signInPage.verifylanguage(language);        String error = signInPage.verifyEmailnull();        Assert.assertEquals(error, TranslationHelpers.setFile(language,                "$.auth.common.errorMessage.emailRequired"));    }    @Test(priority = 1)    @Parameters({"language"})    public void sigInWithPasswordNull(@Optional("English") String language) throws Exception {        driver.navigate().refresh();        validateHelpers.waitForLoadJs();        signInPage.verifylanguage(language);        validateHelpers.waitForLoadJs();        String error = signInPage.verifyPasswordNUll();        Assert.assertEquals(error, TranslationHelpers.setFile(language,                "$.auth.common.errorMessage.passwordRequired"));    }    @Test(priority = 2)    @Parameters({"language"})    public void siginWrongPassOrEmail(@Optional("English") String language) throws Exception {        driver.navigate().refresh();        validateHelpers.waitForLoadJs();        signInPage.verifylanguage(language);        String error;        error = signInPage.verifyWrongEmailOrPassword("asdasd@yopmail.com", "Password1234");        Assert.assertEquals(error, TranslationHelpers.setFile(language,                "$.errorFromServer.usernameOrPasswordIncorrect"));        driver.navigate().refresh();        error = signInPage.verifyWrongEmailOrPassword("testdeferp@yopmail.com", "Password12345");        Assert.assertEquals(error, TranslationHelpers.setFile(language,                "$.errorFromServer.usernameOrPasswordIncorrect"));    }    @Test(priority = 2)    @Parameters({"language"})    public void signInTest(@Optional("English") String language) throws Exception {        driver.navigate().refresh();        signInPage.waitForPageLoaded();        signInPage.verifylanguage(language);        //excelHelper.setExcelFile("src/test/java/resources/Book1.xlsx", "Sheet1");        Assert.assertTrue(signInPage.verifyLogo(), "Not displayed");        //   Assert.assertTrue(signInPage.verifyTitle(TranslationHelpers.setFile(PropertiesHelper.getValue("language"),"$.auth.signInPage.text.welcomeHeader")), "Not same");        Assert.assertTrue(signInPage.verifyUsernameTextBox(), "Not displayed");        Assert.assertTrue(signInPage.verifyPasswordTextBox(), "Not displayed");        signInPage.login(PropertiesHelper.getValue("email"), PropertiesHelper.getValue("password"));        validateHelpers.logout();    }    @Test(priority = 4)    @Parameters({"language"})    public void signInWithInactiveAccount(@Optional("English") String language) {        validateHelpers.waitForLoadJs();        signInPage.verifylanguage(language);        signInPage.verifyAccountInactive(                PropertiesHelper.getValue("inactiveEmail")                , PropertiesHelper.getValue("password1")                , TranslationHelpers.setFile(language, "$.auth.emailVerification.text")                , TranslationHelpers.setFile(language, "$.auth.emailVerification.warningText")                , TranslationHelpers.setFile(language, "auth.emailVerification.explainText"));    }}